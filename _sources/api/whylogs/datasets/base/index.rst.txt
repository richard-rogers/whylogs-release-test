:py:mod:`whylogs.datasets.base`
===============================

.. py:module:: whylogs.datasets.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   whylogs.datasets.base.Batch
   whylogs.datasets.base.Dataset




Attributes
~~~~~~~~~~

.. autoapisummary::

   whylogs.datasets.base.logger


.. py:data:: logger

   

.. py:class:: Batch(timestamp: datetime.date, data: pandas.DataFrame, dataset_config: whylogs.datasets.configs.DatasetConfig, version: str)

   Batch object that encapsulate data and information for a given batch.

   - timestamp: the batch's timestamp (at the start)
   - data: the complete dataframe
   - features: input features
   - target: output feature(s)
   - prediction: output prediction and, possibly, features such as uncertainty, confidence, probability
   - misc: metadata features that are not of any of the previous categories, but still contain relevant information about the data.

   A batch can represent either a baseline or inference batch.
   The complete data is a sum of the remaining dataframe properties: features, target, prediction, and misc.

   .. py:property:: data
      :type: pandas.DataFrame

      The complete dataframe for all available features.

   .. py:property:: timestamp
      :type: datetime.date

      The batch's timestamp (at the start)

   .. py:property:: target
      :type: pandas.DataFrame

      Ouput feature(s)

   .. py:property:: prediction
      :type: pandas.DataFrame

      Output prediction and, possibly, features such as uncertainty, confidence, probability scores

   .. py:property:: extra
      :type: pandas.DataFrame

      Metadata features that are not of any of the previous categories, but still contain relevant information about the data.

   .. py:property:: features
      :type: pandas.DataFrame

      Input features


.. py:class:: Dataset

   Bases: :py:obj:`abc.ABC`

   Abstract class representing a dataset.

   .. py:method:: describe_versions() -> List[str]
      :classmethod:
      :abstractmethod:

      Describe available versions for the given dataset.


   .. py:method:: describe() -> str
      :classmethod:
      :abstractmethod:

      Display overall dataset description.


   .. py:method:: set_parameters(inference_interval: str, baseline_timestamp: Optional[Union[datetime.date, datetime.datetime]] = None, inference_start_timestamp: Optional[Union[datetime.date, datetime.datetime]] = None, original: Optional[bool] = None) -> None
      :abstractmethod:

      Set interval and timestamp parameters for the dataset object.

      :param inference_interval: Time period for each batch retrieved from the inference dataset. E.g. daily batches would be set as "1d"
      :type inference_interval: str
      :param baseline_timestamp: The timestamp for the baseline dataset. Will be set to the dataset's original timestamp if original=True. By default None
      :type baseline_timestamp: Optional[Union[date, datetime]], optional
      :param inference_start_timestamp: The timestamp for the start of the inference dataset. Will be set to the dataset's original timestamp if original=True. By default None
      :type inference_start_timestamp: Optional[Union[date, datetime]], optional
      :param original: If true, will set both baseline_timestamp and inference_start_timestamp to its original values.
      :type original: Optional[bool], optional


   .. py:method:: get_baseline() -> Batch
      :abstractmethod:

      Get baseline Batch object.

      :returns: A batch object representing the complete baseline data.
      :rtype: Batch


   .. py:method:: get_inference_data(target_date: Optional[Union[datetime.date, datetime.datetime]] = None, number_batches: Optional[int] = None) -> Union[Batch, Iterable[Batch]]
      :abstractmethod:

      Get inference batch(es)

      :param target_date: If target_date is set, a single batch will be returned for the given date(or datetime).
                          If both target_date and number_batches are defined, an error will be raised.
      :type target_date: Optional[Union[date, datetime]], optional
      :param number_batches: If number_batches is set to `n`, an iterator of `n` inference batches will be returned, starting from `inference_start_timestamp`.
                             If both target_date and number_batches are defined, an error will be raised.
      :type number_batches: Optional[int], optional

      :returns: Can return either a single or multiple batches, according to the parameters passed.
      :rtype: Union[Batch, Iterable[Batch]]



